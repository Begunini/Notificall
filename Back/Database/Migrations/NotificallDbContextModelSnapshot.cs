// <auto-generated />

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using System;

namespace Database.Migrations
{
    [DbContext(typeof(NotificallDbContext))]
    partial class NotificallDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Database.Entities.Call", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<Guid>("EventId");

                    b.Property<string>("MessageText");

                    b.Property<string>("Phone")
                        .IsRequired();

                    b.Property<int>("Result");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Calls");
                });

            modelBuilder.Entity("Database.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("Edited");

                    b.Property<Guid>("SourceId");

                    b.Property<int>("Status");

                    b.Property<Guid>("TextId");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.HasIndex("TextId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Database.Entities.Source", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("Edited");

                    b.Property<int?>("PhoneColumn");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Sources");
                });

            modelBuilder.Entity("Database.Entities.Text", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("Edited");

                    b.Property<int>("Emotion");

                    b.Property<int>("Language");

                    b.Property<Guid>("SourceId");

                    b.Property<int>("Speaker");

                    b.Property<decimal>("Speed");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.ToTable("Texts");
                });

            modelBuilder.Entity("Database.Entities.Call", b =>
                {
                    b.HasOne("Database.Entities.Event", "Event")
                        .WithMany("Calls")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Entities.Event", b =>
                {
                    b.HasOne("Database.Entities.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");

                    b.HasOne("Database.Entities.Text", "Text")
                        .WithMany()
                        .HasForeignKey("TextId");
                });

            modelBuilder.Entity("Database.Entities.Text", b =>
                {
                    b.HasOne("Database.Entities.Source", "Source")
                        .WithMany("Texts")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
